//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?
  stripeCustomerId String?
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime          @default(now())
  dateUpdated      DateTime          @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  roles            Role[]
  phoneNumber      String?
  countryCode      String?
  currency         String?
  payments         Payment[]         @relation("user")
  paymentHistorys  PaymentHistory[]  @relation("user")
  paymentMethods   PaymentMethod[]   @relation("user")
  customerSupports CustomerSupport[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Payment {
  id              String           @id() @default(uuid())
  amount          Float
  currency        String
  status          String
  initiatedAt     String
  completedAt     String?
  userId          String
  user            User?            @relation(fields: [userId], references: [id], name: "user")
  paymentDetails  PaymentDetail[]  @relation("payment")
  paymentHistorys PaymentHistory[] @relation("payment")
  receipts        Receipt[]        @relation("payment")
  dateCreated     DateTime         @default(now())
  dateUpdated     DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PaymentDetail {
  id          String   @id() @default(uuid())
  upiId       String
  authCode    String
  paymentId   String
  payment     Payment? @relation(fields: [paymentId], references: [id], name: "payment")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PaymentHistory {
  id          String   @id() @default(uuid())
  date        String
  currency    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  paymentId   String
  payment     Payment? @relation(fields: [paymentId], references: [id], name: "payment")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Receipt {
  id          String   @id() @default(uuid())
  receiptUrl  String
  paymentId   String
  payment     Payment? @relation(fields: [paymentId], references: [id], name: "payment")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PaymentMethod {
  id              String   @id() @default(uuid())
  methodType      String
  details         String
  defaultCurrency String
  userId          String
  user            User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated     DateTime @default(now())
  dateUpdated     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CustomerSupport {
  id               String   @id() @default(uuid())
  issueDescription String
  status           String
  userId           String
  user             User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated      DateTime @default(now())
  dateUpdated      DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', true)
model ExchangeRate {
  id           String   @id() @default(uuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TermsAndConditions {
  id          String   @id() @default(uuid())
  content     String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Faq {
  id          String   @id() @default(uuid())
  question    String
  answer      String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
